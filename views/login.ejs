<!-- views/login.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Login</title>

<!-- Links -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<!-- <link rel="stylesheet" href="/css/login.css"> -->

<style>
    /*<style>*/
body {
    background-color: #f5f6f9; /* Background color */

}

.center-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 15px; /* Ensure there's padding around the container */
    margin-top: -50px;
}
.form-wrapper {
    width: 100%;
    max-width: 450px; /* Set a max-width for the form wrapper */
    padding: 25px; /* Add padding inside the form wrapper */
    border: 2px solid #e3e2e2;
    border-radius: 8px;
    box-shadow: 0 3px 3px rgba(0, 0, 0, 0.1); /* Box shadow for the form */
    background-color: #fff; /* Background color for the form */
}
.custom-swal {
    margin: 1rem; /* Adjust margins as needed */
}
/**/
.input-group {
    position: relative; /* Ensure the position is relative for correct z-index stacking */
}
.toggle-password {
    cursor: pointer;
    position: absolute; /* Adjusted to 'absolute' for correct positioning */
    top: 50%;
    right: 10px; /* Adjusted for better placement */
    transform: translateY(-50%);
    color: #6c757d;
    font-size: 1.2rem;
    z-index: 10; /* Ensure this is higher than the input field */
    border: none;
    background-color: none;
    background-color: transparent;
}
input[type="password"] {
    padding-right: 40px; /* Space for the toggle icon */
}
#toggleIcon { /*animation*/
    cursor: pointer;
    opacity: 0; /* Initially hidden */
    transition: opacity 0.2s ease; /* Transition for opacity */
    display: inline; /* Maintain inline layout */
}

#toggleIcon.visible {
    opacity: 1; /* Fully visible when class is added */
}

/*.control-label.required::before{
content: "* ";
color: red;
}*/
.control-label{
    font-weight: 650;
}
.form-control:focus {
    /*border-color: #1e90ff; pwedi mo namn lagyan ng kulay yung border*/ 
    background-color: #fff; /* Ensures the background is white on focus */
    box-shadow: none; /* Removes the default box-shadow on focus */
    border-color: #ced4da;
    outline: none;
}

.shake {
    animation: shake 0.5s;
}
@keyframes shake {
    25% { transform: translateX(4px); }
    50% { transform: translateX(-4px); }
    75% { transform: translateX(4px); }
} 
/**Scroll Up Animation************************************************************************************************************/
.scrollElement {
    opacity: 0;
}

@keyframes scrollAnimation {
    0% {
        transform: translateY(-40px);
        opacity: 0;
    }
    100% {
        transform: translateY(0);
        opacity: 1;
    }
}

.scroll-animation {
    animation: scrollAnimation 0.6s ease-out forwards;
}


 #submitBtn {
    width: 100%;
      padding: 12px;
      font-size: 16px;
      color: #fff;
      background: linear-gradient(90deg, #3a85ff, #00d2ff);
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
}

#submitBtn:hover {
    background: linear-gradient(90deg, #00d2ff, #3a85ff);
}


#submitBtn i {
    transition: transform 0.2s ease; /* Smooth transition */
}

#submitBtn:hover i {
    transform: translateX(10px); /* Move the icon to the right */
}
/*</style>*/
</style>

</head>
<body>
<!--<h2>Login</h2>-->
<!--
<% if (error) { %>
    <div style="color: red;"><%= error %></div>
<% } %>

<form action="/login" method="POST">
    <label for="email">Email:</label>
    <input type="email" name="email" id="email" required>
    <br><br>
    
    <label for="password">Password:</label>
    <input type="password" name="password" id="password" required>
    <br><br>
    
    <button type="submit">Login</button>
</form>-->


<div class="center-container scrollElement">
    <div class="form-wrapper px-4 mx-4" style="padding-top: 80px; padding-bottom: 80px; padding-left: 1180px;" >
        <h2 class="text-left mb-4" style="color:#3a85ff">Welcome Back</h2>
        <p class="text-left mb-4" style="color:#4b4d50; font-size: 18px; margin-top: -10px;">Enter your email and password to sign in</p>
        <form id="login-form" action="/login" method="POST">
            <div class="mb-3">
                <div class="form-group">
                    <label for="email" class="control-label required" style="color:#4b4d50;">Email:</label>
                    <div class="input-group" style="text-decoration: none;">
                        <input type="email" class="form-control" id="email" name="email" style="border-radius: 5px;" spellcheck="false"  placeholder="Enter Email" required autocomplete="off">
                    </div>
                    <p class="ms-2 mb-0" id="emailError" style="color: red; display:none;" ></p>
                </div>
            </div>
            <div class="mb-3 pb-2">
                <label for="password" class="form-label fw-bold control-label required" style="color:#4b4d50;">Password:</label>
                <div class="input-group">
                    <input type="password" class="form-control" id="password" name="password" style="border-radius: 5px; margin-top: -9px;" oninput="checkPasswordField()" placeholder="Enter Password" required autocomplete="off">
                    <span class="input-group-text toggle-password" id="iconContainer2" onclick="togglePassword()">
                        <i id="toggleIcon" class="far fa-eye" style="font-size: 15px; color: #434649;"></i><!--color: #acb1b9;-->
                    </span>
                </div>
                <p class="ms-2 mb-0" id="passwordError" style="color: red; display: none; height: 24px;" ></p>
            </div>
            <div style="display: flex; justify-content: center;">
                <button type="submit" class="btn btn-primary mb-3" id="submitBtn" style="width: 100%; max-width: 550px; padding: 9px 12px;">
                    Continue<i class="fa-solid fa-arrow-right-to-bracket ms-2"></i><!--letter-spacing: 2px;-->
                </button>
            </div>
        </form>
    </div>
</div>

 <!-- Bootstrap JS and libraryies dependencies -->
    <!-- <script src="/js/validationAndsanitation.js" defer></script> -->
    <!-- <script src="/js/scrollAnimation.js" defer></script> -->

    <script>
        // Email Validation and Sanitation
document.getElementById('email').addEventListener('input', function() {
    var emailInput = this.value;
    var errorMessage = document.getElementById('emailError');
    const submitButton = document.getElementById('submitBtn');
    const emailField = this;

    // Regular expression to check for valid email structure
    var emailParts = emailInput.split('@');

    // Check for multiple "@" symbols and for special characters and numbers in the domain
    var hasSpecialCharacters = /[!#$%^&*()_+\-=\[\]{};':"\\|,<>\/?]/.test(emailParts[1] || '');

    if (emailParts.length > 2 || hasSpecialCharacters || (emailParts.length === 2 && emailParts[1].match(/\d/))) {
        errorMessage.textContent = 'Invalid email format';
        errorMessage.style.display = 'block'; // Show error message
        submitButton.disabled = true; // Disable submit button
        emailField.style.borderColor = 'red'; // Change border color to red
        emailField.style.color = 'red'; // Change text color to red
        errorMessage.classList.add('shake'); // Add shake class
    } else {
        errorMessage.textContent = '';
        errorMessage.style.display = 'none'; // Hide error message
        submitButton.disabled = false; // Enable submit button
        emailField.style.borderColor = ''; // Reset border color
        emailField.style.color = ''; // Reset text color
        errorMessage.classList.remove('shake'); // Remove shake class
    }

});

// Password Validation and Sanitation
document.getElementById('password').addEventListener('input', function() {
    var passwordInput = this.value;
    var passwordErrorMessage = document.getElementById('passwordError');
    const submitButton = document.getElementById('submitBtn');
    const passwordField = this;

    // Regular expression to check for special characters
    var hasSpecialCharacters = /[!#$%^&*()@_+\-=\[\]{};':"\\|.,<>\/?]/.test(passwordInput);

    // Password validation: No special characters and length must be <= 255 characters
    if (passwordInput.length > 255 || hasSpecialCharacters) {
        passwordErrorMessage.textContent = 'No symbols allowed';
        passwordErrorMessage.style.display = 'block'; // Show error message
        submitButton.disabled = true; // Disable submit button
        passwordField.style.borderColor = 'red'; // Change border color to red
        passwordField.style.color = 'red'; // Change text color to red
        passwordErrorMessage.classList.add('shake'); // Add shake class
    } else {
        passwordErrorMessage.textContent = '';
        passwordErrorMessage.style.display = 'none'; // Hide error message
        submitButton.disabled = false; // Enable submit button
        passwordField.style.borderColor = ''; // Reset border color
        passwordField.style.color = ''; // Reset text color
        passwordErrorMessage.classList.remove('shake'); // Remove shake class
    }
});

    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
    const scrollElements = document.querySelectorAll(".scrollElement");

    // Function to handle intersection events
    function handleIntersection(entries, observer) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Add the animation class to the element
                entry.target.classList.add("scroll-animation");
                // Once the animation is triggered, unobserve the element
                observer.unobserve(entry.target);
            }
        });
    }

    // Create the Intersection Observer
    const observer = new IntersectionObserver(handleIntersection, {
        threshold: 0.3 // Trigger when at least 50% of the element is in view
    });

    // Start observing each scrollElement
    scrollElements.forEach(element => {
        observer.observe(element);
    });
});



/*
document.addEventListener("DOMContentLoaded", function() {
    const scrollElements = document.querySelectorAll(".scrollElement");

    // Function to handle intersection events
    function handleIntersection(entries, observer) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Add the animation class to the element
                entry.target.classList.add("scroll-animation");
                // Once the animation is triggered, unobserve the element
                observer.unobserve(entry.target);
            }
        });
    }

    // Create the Intersection Observer
    const observer = new IntersectionObserver(handleIntersection, {
        threshold: 0.5 // Trigger when at least 50% of the element is in view
    });

    // Check navigation type if you have specific conditions
    if (performance.navigation.type !== performance.navigation.TYPE_RELOAD) {
        // Start observing each scrollElement
        scrollElements.forEach(element => {
            observer.observe(element);
        });
    } else {
        // Logic for handling reloads if needed
        // For example, you can still observe elements if desired
        scrollElements.forEach(element => {
            observer.observe(element);
        });
    }
});
*/


    </script>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>

<!-- Eye toggle for password -->
<script>
    function togglePassword() {
        const passwordField = document.getElementById('password');
        const toggleIcon = document.getElementById('toggleIcon');
        const passwordFieldType = passwordField.getAttribute('type');
        if (passwordFieldType === 'password') {
            passwordField.setAttribute('type', 'text');
            toggleIcon.classList.remove('fa-eye');
            toggleIcon.classList.add('fa-eye-slash');
        } else {
            passwordField.setAttribute('type', 'password');
            toggleIcon.classList.remove('fa-eye-slash');
            toggleIcon.classList.add('fa-eye');
        }
    }

    function checkPasswordField() {
        const passwordField = document.getElementById('password');
        const toggleIcon = document.getElementById('toggleIcon');
        if (passwordField.value) {
            toggleIcon.classList.add('visible'); // Show the icon
        } else {
            toggleIcon.classList.remove('visible'); // Hide the icon
        }
    }

    // Call the checkPasswordField function on input event
    document.getElementById('password').addEventListener('input', checkPasswordField);

</script>

</body>
</html>
